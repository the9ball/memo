using UnityEngine;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditorInternal;
using System.Text;
using System.IO;
using System.Linq;

public static class GenerateEnum
{
	private static readonly string[] InvalidCharacters =
	{
		" ", "!", "\"", "#", "$",
		"%", "&", "\'", "(", ")",
		"-", "=", "^",  "~", "\\",
		"|", "[", "{",  "@", "`",
		"]", "}", ":",  "*", ";",
		"+", "/", "?",  ".", ">",
		",", "<"
	};
	private static readonly string ReplaceCharacter = "_";

	private const string MenuItemName = "Tools/Create/Generate Project Enums";
	private const string ExportFilePath = "Assets/Products/Scripts/Generated/ProjectEnums.cs"; // 出力ファイル.

	[DidReloadScripts(), MenuItem(MenuItemName)]
	public static void Generate()
	{
		var builder = new StringBuilder();

		builder.AppendLine("/// Auto Generated by class GenerateEnum");

		builder.AppendLine("namespace Projectf");
		builder.AppendLine("{");

		var indent = "\t";
		ExportLayer(builder, indent);
		ExportTag(builder, indent);
		ExportSortingLayer(builder, indent);
		ExportSceneName(builder, indent);

		builder.AppendLine("}");
		builder.AppendLine("");

		var directoryName = Path.GetDirectoryName(ExportFilePath);
		if (!Directory.Exists(directoryName))
		{
			//Directory.CreateDirectory(directoryName);
			UnityEngine.Debug.LogError("Not Found:"+directoryName);
			return;
		}

		File.WriteAllText(ExportFilePath, builder.ToString(), Encoding.UTF8);
		AssetDatabase.Refresh(ImportAssetOptions.ImportRecursive);
	}

	private static void ExportTag(StringBuilder builder, string indent)
	{
		builder.AppendLine(indent + "public enum Tag");
		builder.AppendLine(indent + "{");

		var tags = InternalEditorUtility.tags
			.Select((x,i) => new{i=i, x=x});
		foreach (var x in tags)
		{
			builder.AppendLine(indent + "\t" + ReplaceInvalidCharacter(x.x) + " = " + x.i + ",");
		}

		builder.AppendLine(indent + "}");
		builder.AppendLine("");
	}

	private static void ExportLayer(StringBuilder builder, string indent)
	{
		var layers = InternalEditorUtility.layers;

		builder.AppendLine(indent + "public enum Layer");
		builder.AppendLine(indent + "{");

		foreach (var x in layers)
		{
			builder.AppendLine(indent + "\t" + ReplaceInvalidCharacter(x) + " = " + LayerMask.NameToLayer(x) + ",");
		}

		builder.AppendLine(indent + "}");
		builder.AppendLine("");

		builder.AppendLine(indent + "[System.Flags]");
		builder.AppendLine(indent + "public enum LayerMask");
		builder.AppendLine(indent + "{");

		foreach (var x in layers)
		{
			builder.AppendLine(indent + "\t" + ReplaceInvalidCharacter(x) + " = 1 << " + LayerMask.NameToLayer(x) + ",");
		}

		builder.AppendLine(indent + "}");
		builder.AppendLine("");
	}

	private static void ExportSortingLayer(StringBuilder builder, string indent)
	{
		var tagManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset")[0]);
		var sortingLayer = tagManager.FindProperty("m_SortingLayers");

		builder.AppendLine(indent + "public enum SortingLayer");
		builder.AppendLine(indent + "{");

		for (int i=0; i<sortingLayer.arraySize; ++i)
		{
			string tag = sortingLayer.GetArrayElementAtIndex(i).displayName;
			builder.AppendLine(indent + "\t" + ReplaceInvalidCharacter(tag) + " = " + i + ",");
		}

		builder.AppendLine(indent + "}");
		builder.AppendLine("");
	}

	private static void ExportSceneName(StringBuilder builder, string indent)
	{
		builder.AppendLine(indent + "public static class SceneName");
		builder.AppendLine(indent + "{");

		var scenes = EditorBuildSettings.scenes
			.Select(x => Path.GetFileNameWithoutExtension(x.path))
			.Select(x => ReplaceInvalidCharacter(x))
			.Distinct();
		foreach (var x in scenes)
		{
			builder.AppendLine(indent + "\tpublic const string " + x + " = @\"" + x + "\";");
		}

		builder.AppendLine(indent + "}");
		builder.AppendLine("");
	}

	private static string ReplaceInvalidCharacter(string s)
	{
		foreach (var x in InvalidCharacters)
		{
			s = s.Replace(x, ReplaceCharacter);
		}
		return s;
	}

	[MenuItem(MenuItemName, true)]
	public static bool CanCreate()
	{
		return !EditorApplication.isPlaying && !Application.isPlaying && !EditorApplication.isCompiling;
	}
}
